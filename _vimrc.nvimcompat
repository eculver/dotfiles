" Evan's bitchin vimrc, heavily inspired by the honorable @jcorbin and his
" great home repo: https://github.com/jcorbin/home/blob/master/.vimrc

" for debugging
" set verbose=9
" set verbosefile=~/vim.log

" for testing/reloading plugins
" nvim +PlugInstall +UpdateRemotePlugins +qa

" Define $VIMHOME:
" - for NeoVim it's the directory that contains $MYVIMRC, usually
"   ~/.config/nvim on unix
" - for Vim it's ~/.vim on unix
let $VIMHOME=expand('<sfile>:p:h')
if $VIMHOME == $HOME
  let $VIMHOME=$HOME.'/.vim'
endif

" setup vim-plug, downloading it if needed
" see https://github.com/junegunn/vim-plug
if empty(glob($VIMHOME.'/autoload/plug.vim'))
    if !isdirectory($VIMHOME.'/autoload')
      call mkdir($VIMHOME.'/autoload', "p")
    endif
    !curl -fLo $VIMHOME/autoload/plug.vim --create-dirs
      \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

call plug#begin($VIMHOME.'/plugged')

" plugins {{{

" better defaults out of the box
Plug 'tpope/vim-sensible'

" complements builtin NetRW mode for easier file navigation
Plug 'tpope/vim-vinegar'

" simplify surround/repeat tasks
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'briandoll/change-inside-surroundings.vim'

" git integration
Plug 'tpope/vim-fugitive'

" commenting 
Plug 'tomtom/tcomment_vim'

" better statusline 
Plug 'itchyny/lightline.vim'

" better support for certain languages
let g:polyglot_disabled = ['go', 'markdown']
Plug 'sheerun/vim-polyglot', {'commit':'d9b11ed'} " pinned due to conflict: https://github.com/sheerun/vim-polyglot/issues/309
Plug 'fatih/vim-go'
Plug 'zaiste/tmux.vim'

" tmux integration, mostly for running commands in a separate pane from vim
Plug 'benmills/vimux'

" live linting, no more waiting for write!
Plug 'w0rp/ale'

" find things w/ the silver searcher
Plug 'rking/ag.vim'

" autodetect indent level (stop running `:set ts=X sw=X` all the time when
" crossing tribe lines)
Plug 'tpope/vim-sleuth'

" file browsing
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'

" snippets
Plug 'Shougo/neosnippet-snippets'
Plug 'Shougo/neosnippet.vim'
Plug 'honza/vim-snippets'

if has("nvim")
  " TODO: re-consider https://github.com/tjdevries/nvim-langserver-shim, since
  " it looks to be trying for upstream
  Plug 'autozimu/LanguageClient-neovim', { 'branch': 'next', 'do': 'bash install.sh' }
  Plug 'Shougo/echodoc.vim'
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
  Plug 'mdempsky/gocode', { 'rtp': 'nvim', 'do': '~/.config/nvim/plugged/gocode/nvim/symlink.sh' }
  Plug 'zchee/deoplete-go', { 'do': 'make' }
else
  Plug 'Shougo/neocomplete.vim'
  let g:neosnippet#snippets_directory="$HOME/.config/nvim/snippets,$HOME/.config/nvim/plugged/vim-snippets/snippets,$HOME/.vim/bundle/vim-snippets/snippets"
endif

call plug#end()

" }}}

" Save swap files in one place... {{{
if !has("nvim")
  " ...instead of beside the file being edited. This ends up being kinder to
  " things like SCM and remote file systems.
  " Neovim already does similar outof the box (under ~/.local/share/nvim/swap/...).
  set directory=$VIMHOME/swap
  if !isdirectory(&directory)
    call mkdir(&directory, "p", 0700)
  endif
endif
" }}}

" Persistent undo (vim 7.3+) {{{
" Saves undo history, in a similar location as swap files, so that you don't
" loose undo history when quitting and re-editing the same file.
if has("persistent_undo")
  set undodir=$VIMHOME/undo
  set undofile
  set undoreload=10000
  if !isdirectory(&undodir) && exists("*mkdir")
    call mkdir(&undodir, "p", 0700)
  endif
endif
" }}}


" {{{ plugin configuration

" lightline
let g:lightline = {
      \ 'colorscheme': 'jellybeans',
      \ 'active': {
      \     'left': [ [ 'mode', 'paste' ],
      \               [ 'fugitive', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'fugitive': 'LightlineFugitive',
      \   'readonly': 'LightlineReadonly',
      \   'filename': 'LightlineFilename',
      \   'modified': 'LightlineModified'
      \ },
      \ 'separator': { 'left': '⮀', 'right': '⮂' },
      \ 'subseparator': { 'left': '⮁', 'right': '⮃' }
      \ }

function! LightlineModified()
  if &filetype == "help"
    return ""
  elseif &modified
    return "+"
  elseif &modifiable
    return ""
  else
    return ""
  endif
endfunction

function! LightlineReadonly()
  if &filetype == "help"
    return ""
  elseif &readonly
    return "⭤"
  else
    return ""
  endif
endfunction

function! LightlineFugitive()
  return exists('*fugitive#head') ? fugitive#head() : ''
endfunction

function! LightlineFilename()
  return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
       \ ('' != expand('%:t') ? expand('%:t') : '[No Name]') .
       \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
endfunction

" vim-go
let g:go_fmt_autosave = 1
let g:go_fmt_command = "goimports"
let g:go_list_type = "quickfix"

let g:go_auto_type_info = 0
let g:go_jump_to_error = 1

let g:go_highlight_build_constraints = 1
let g:go_highlight_functions = 1
let g:go_highlight_interfaces = 1
let g:go_highlight_methods = 1
let g:go_highlight_operators = 1
let g:go_highlight_fields = 1
let g:go_highlight_structs = 1
let g:go_highlight_generate_tags = 1

let g:go_snippet_engine = "neosnippet"
let g:go_template_autocreate = 0

let g:go_term_mode = "split"
let g:go_term_enabled = 1

augroup nolistgo
  autocmd FileType go setlocal nolist
augroup END

" Ale

let g:ale_sign_error='⊘'
let g:ale_sign_warning='⚠'

" deoplete
if has("nvim")
  let g:deoplete#enable_at_startup = 1
  set completeopt=menu,preview,longest,noselect
  set infercase

  " echodoc
  let g:echodoc_enable_at_startup=1
endif

" snippets
" Enable on startup
let g:neocomplete#enable_at_startup = 1

" Use smartcase.
let g:neocomplete#enable_smart_case = 1

" key mappings {{{

let mapleader=","
let maplocalleader="."

" map <silent><C-Left> <C-T>
" map <silent><C-Right> <C-]>

" neosnippet {{{
imap <C-e>     <Plug>(neosnippet_expand_or_jump)
smap <C-e>     <Plug>(neosnippet_expand_or_jump)
xmap <C-e>     <Plug>(neosnippet_expand_target)
imap <C-f>     <Plug>(neosnippet_jump)
smap <C-f>     <Plug>(neosnippet_jump)

" TODO get plugged root programatically for g:neosnippet#snippets_directory
let g:neosnippet#snippets_directory="$HOME/.config/nvim/snippets,$HOME/.config/nvim/plugged/vim-snippets/snippets"

" For conceal markers.
set conceallevel=1
set concealcursor=niv

" }}}

" Tab key {{{

" Invokes deoplete in insert mode.
imap <silent> <expr><Tab> deoplete#mappings#manual_complete()

" Try to expand or jump in normal mode.
snoremap <expr><Tab>
\ neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" :
\ "\<Tab>"

" }}}

" Tab management
map <silent><S-n> :tabnext<CR>
map <silent><S-p> :tabprevious<CR>
map <silent><S-t> :tabnew<CR>

" Open new tab and toggle NERDTree
nnoremap <Leader>tt :tablast<CR><Bar>:tabnew<CR><Bar>:NERDTreeToggle<CR><Bar><C-w><Right><Bar>:q<CR>
let g:NERDTreeWinSize = 40

" Easily move around long wrapped lines
nnoremap k gk
nnoremap j gj

" Execute selected script
map <C-h> :py EvaluateCurrentRange()<CR>

" Show Project Tree
map <LocalLeader>tt :NERDTreeToggle<CR>

" Open Project Tree to current file
map <LocalLeader>tf :NERDTreeFind<CR>

" Toggle Paste Mode
nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>
set showmode

" Prompt for a command to run
map <Leader>rp :VimuxPromptCommand<CR>

" Run last command executed by RunVimTmuxCommand
map <Leader>rl :VimuxRunLastCommand<CR>

" Close all other tmux panes in current window
map <Leader>rx :CloseVimTmuxPanes<CR>

" If text is selected, save it in the v buffer and send that buffer it to tmux
vmap <LocalLeader>vs "vy :call RunVimTmuxCommand(@v)<CR>

" Mappings for handling unwanted whitespace
nnoremap <Leader>ss :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>
nnoremap <Leader>st :let _s=@/<Bar>:%s/\t/    /ge<Bar>:let @/=_s<Bar>:nohl<CR>

" Apply title case to visual selection
vmap <Leader>sT :s/\<\(\w\)\(\w*\)\>/\u\1\L\2/g<CR>

" 'Listify' all lines starting with 4 blank lines
nnoremap <Leader>ll :g/^   /norm wys$<li><CR>

" Mapping to insert a newline after line w/o entering insert mode
nmap <S-Enter> O<Esc>
nmap <CR> o<Esc>

" Clear search highlight
nnoremap <Leader>/ :noh<CR>

" Re-indent entire file and return to current mark
" map to both Shift-i and <Leader>si to be consistent with other line
" manipulations
map <S-i> mzgg=G`z
nnoremap <Leader>si mzgg=G`z<CR>

" Rebind Command-T
map <LocalLeader>t :CommandT<CR>
map <LocalLeader>b :CommandTBuffer<CR>

" Buffer helpers
" new empty buffer
nmap <LocalLeader>T :enew<CR><Bar>:NERDTreeToggle<CR>
" move to next buffer
nmap <LocalLeader>l :bnext<CR>
" move to previous buffer
nmap <LocalLeader>h :bprevious<CR>
" close current buffer and move to the previous one
nmap <LocalLeader>bq :bp <BAR> bd #<CR>
" show all open buffers and their status
nmap <LocalLeader>bl :ls<CR>

let Tlist_GainFocus_On_ToggleOpen=1
let g:skip_loading_mswin=1

" Quickfix shortcuts
nmap <LocalLeader>n :cn<CR>

" commenting
nnoremap // :TComment<CR>
vnoremap // :TComment<CR>

" vim-go

" Open definition under cursor in new vertical, horizontal split or tab
au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)

" Info, run, build, test, coverage
au FileType go nmap <Leader>i <Plug>(go-info)
au FileType go nmap <Leader>r <Plug>(go-run)
au FileType go nmap <Leader>b <Plug>(go-build)
au FileType go nmap <Leader>t <Plug>(go-test)
au FileType go nmap <Leader>c <Plug>(go-coverage)
au FileType go nmap <Leader>x <Plug>(go-coverage-clear)
au FileType go nmap <Leader>e :GoErrCheck<CR>

" snippets 
if !has("nvim")
    inoremap <expr><C-g>     neocomplete#undo_completion()
    inoremap <expr><C-l>     neocomplete#complete_common_string()

    " <CR>: close popup and save indent.
    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
    function! s:my_cr_function()
    return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
    endfunction
    " <TAB>: completion.
    inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
    " <C-h>, <BS>: close popup and delete backword char.
    inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
    inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
endif

" For snippet_complete marker.
if has('conceal')
  set conceallevel=1 concealcursor=niv
endif

" Ag
noremap <LocalLeader># "ayiw:Ag <C-r>a<CR>
vnoremap <LocalLeader># "ay:Ag <C-r>a<CR>

" misc options {{{

set mouse=a         " enable mousing around
set nocompatible    " Stop behaving like vi; vim enhancements are better
set lazyredraw

if has("nvim")
  set inccommand=nosplit
endif

" Ignore extensions
set wildignore=*.o,*~,*.pyc,*.so,*.swp,*.zip,*.gz

" Encoding
if has("multi_byte")
  if &termencoding == ""
    let &termencoding = &encoding
  endif
  set encoding=utf-8
  setglobal fileencoding=utf-8
  "setglobal bomb
  set fileencodings=utf-8,latin1
endif

""" Moving Around/Editing
set nostartofline           " Avoid moving cursor to BOL when jumping around
set virtualedit=block       " Let cursor move past the last char in <C-v> mode
set scrolloff=3             " Keep 3 context lines above and below the cursor
set sidescrolloff=3         " Keep 3 context lines above and below the cursor
set backspace=2             " Allow backspacing over autoindent, EOL, and BOL
set showmatch               " Briefly jump to a paren once it's balanced
set matchtime=2             " (for only .2 seconds).
set nowrap                  " don't wrap text
set linebreak               " don't wrap textin the middle of a word

""" Searching and Patterns
set ignorecase              " Default to using case insensitive searches,
set smartcase               " unless uppercase letters are used in the regex.
set hlsearch                " Highlight searches by default.
set incsearch               " Incrementally search while typing a /regex

augroup hlsearch
  autocmd InsertEnter * :setlocal nohlsearch " Disable hlsearch in insert mode...
  autocmd InsertLeave * :setlocal   hlsearch " ...enable it when we come out.
augroup END

" Spelling {{{
" set spell

" ... except for some filetypes
augroup nospell
  autocmd FileType help setlocal nospell
  autocmd FileType man setlocal nospell
  autocmd FileType startify setlocal nospell
  autocmd FileType gedoc setlocal nospell
  autocmd FileType godoc setlocal nospell
  autocmd FileType qf setlocal nospell
  autocmd FileType netrw setlocal nospell
  autocmd FileType vim-plug setlocal nospell
  autocmd FileType fugitiveblame setlocal nospell
  autocmd FileType goterm setlocal nospell
augroup END

" spell check in git mode
augroup git
autocmd Filetype gitcommit setlocal spell textwidth=72
augroup END

" }}}

""" More Natural Splits
set splitbelow
set splitright

""" Insert completion
" don't select first item, follow typing in autocomplete
set completeopt=longest,menuone,preview
set pumheight=6             " Keep a small completion window

" close preview window automatically
autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
autocmd InsertLeave * if pumvisible() == 0|pclose|endif

""" Folding
" set nofoldenable            " Disable folding
set foldmethod=indent   "fold based on indent
set foldnestmax=10      "deepest fold is 10 levels
set nofoldenable        "dont fold by default
set foldlevel=1

set number                  " Display line numbers
set numberwidth=1           " using only 1 column (and 1 space) while possible
set background=dark
set cursorline              " Highlight current line
set cursorcolumn            " Highlight current column

if has("gui_running")
    set guioptions-=m           " remove menu bar
    set guioptions-=T           " remove toolbar
    set guioptions-=r           " remove right-hand scroll bar
endif

set t_Co=256 " Explicitly tell vim that the terminal has 256 colors

" show a gray line at column 79
if exists("&colorcolumn")
    execute "set colorcolumn=" . join(range(81,335), ',')
    set colorcolumn=79
endif

"""" Messages, Info, Status
set title                   " Terminal title
set vb t_vb=                " Disable all bells.  I hate ringing/flashing.
set confirm                 " Y-N-C prompt if closing with unsaved changes.
set showcmd                 " Show incomplete normal mode commands as I type.
set report=0                " : commands always print changed line count.
set shortmess+=a            " Use [+]/[RO]/[w] for modified/readonly/written.
set ruler                   " Show some info, even without statuslines.
set laststatus=2            " Always show statusline, even if only 1 window.
"set statusline=%F%m%r%h%w\ %{fugitive#statusline()}\ [LINE=%l:%c]\ [LEN=%L]

set smartindent
set autoindent
set tabstop=4               " 4-space tabs
set expandtab               " Use spaces, not tabs, for autoindent/tab key.
set shiftround              " rounds indent to a multiple of shiftwidth
set shiftwidth=4            " 4-space indent/outdent

"""" Tags
" Tags can be in ./tags, ../tags, ..., /home/tags.
set tags+=$HOME/.vim/tags/python.ctags
set tags+=$HOME/.vim/tags/django.ctags

set showfulltag             " Show more information while completing tags.
set cscopetag               " When using :tag, <C-]>, or "vim -t", try cscope:
set cscopetagorder=0        " try ":cscope find g foo" and then ":tselect foo"

"""" Reading/Writing
set noautowrite             " Never write a file unless I request it.
set noautowriteall          " NEVER.
set noautoread              " Don't automatically re-read changed files.
set modeline                " Allow vim options to be embedded in files;
set modelines=5             " they must be within the first or last 5 lines.
set ffs=unix,dos,mac        " Try recognizing dos, unix, and mac line endings.

"""" Backups/Swap Files
" Make sure that the directory where we want to put swap/backup files exists.
if has("unix")
    if ! len(glob("~/.backup/"))
        echomsg "Backup directory ~/.backup doesn't exist!"
    endif
    set backupdir^=~/.backup    " Backups are written to ~/.backup/ if possible.
    set directory^=~/.backup//  " Swap files are also written to ~/.backup, too.
endif

set writebackup             " Make a backup of the original file when writing

"set backup                 " and don't delete it after a succesful write.
set backupskip=             " There are no files that shouldn't be backed up.
set updatetime=2000         " Write swap files after 2 seconds of inactivity.
set backupext=~             " Backup for "file" is "file~"

"""" Command Line
set history=1000            " Keep a very long command-line history.
set wildmenu                " Menu completion in command mode on <Tab>
set wildmode=full           " <Tab> cycles between all matching choices.
set wcm=<C-Z>               " Ctrl-Z in a mapping acts like <Tab> on cmdline
" set cmdheight=1
source $VIMRUNTIME/menu.vim " Load menus (this would be done anyway in gvim)
" <F4> triggers the menus, even in terminal vim.
map <F4> :emenu <C-Z>

"""" Language Server Clients
let g:LanguageClient_serverCommands = {
    \ 'go': [$GOPATH.'/bin/go-langserver', '-pprof', ':26060'],
    \ }

" Automatically start language servers.
let g:LanguageClient_autoStart = 1

"""" Per-Filetype Scripts
" NOTE: These define autocmds, so they should come before any other autocmds.
"       That way, a later autocmd can override the result of one defined here.
filetype on                 " Enable filetype detection,
filetype indent on          " use filetype-specific indenting where available,
filetype plugin on          " also allow for filetype-specific plugins,
filetype plugin indent on   " required for Vundle
syntax on                   " and turn on per-filetype syntax highlighting.

" Hack filetype for some extensions {{{
augroup filetype_ext_hacks
  " Since I frequently edit Markdown files, and never Modula files
  autocmd BufRead,BufNewFile *.md setlocal filetype=markdown
augroup END
" }}}

" wrap long lines in quickfix
augroup quickfix
    autocmd!
    autocmd FileType qf setlocal wrap
augroup END

" treat html files as django templates
autocmd BufRead *.html set filetype=htmldjango

" JSON Highlighting
autocmd BufRead *.json set filetype=json

" YAML Highlighting
au! BufRead,BufNewFile *.yaml,*.yml so ~/.vim/syntax/yaml.vim

" LESS Highlighting
au! BufRead,BufNewFile *.less set filetype=less

" SASS Highlighting
au! BufRead,BufNewFile *.sass set filetype=sass
au! BufRead,BufNewFile *.scss set filetype=scss

" Handlebars Highlighting
au BufRead,BufNewFile *.handlebars,*.hbs set ft=html syntax=handlebars

autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd BufRead *.py set makeprg=python\ -c\ \"import\ py_compile,sys;\ sys.stderr=sys.stdout;\ py_compile.compile(r'%')\"
autocmd BufRead *.py set efm=%C\ %.%#,%A\ \ File\ \"%f\"\\,\ line\ %l%.%#,%Z%[%^\ ]%\\@=%m

" CQL Highlighting
au! BufRead,BufNewFile *.cql set filetype=cql

" Display
colorscheme jellybeans
" colorscheme lucid
" colorscheme benlight
" colorscheme void

" Tabs / Whitespace / Highlights (*after* colorscheme to override)
"
" Previous preference:
" ------------------------------
" preceeding/trailing tabs: '··'
" trailing whitespace:      '-'
" line-endings:             '$'
" ------------------------------
" set listchars=tab:··,eol:$,trail:-,precedes:<,extends:>
" set list
"
" OR
"
" Yet another option:
" ------------------------------
" preceeding/trailing tabs: '··'
" trailing whitespace:      '·'
" line-endings:             NONE
" ------------------------------
" set listchars=trail:·,tab:··
" set list

" Current preference (autocmds):
" ------------------------------
" preceeding/trailing tabs: highlight: gray
" trailing whitespace:      highlight: green
" line-endings:             NONE
" ------------------------------
highlight ExtraWhitespace ctermbg=darkgreen
match ExtraWhitespace /\s\+$/
au BufWinEnter * match ExtraWhitespace /\s\+$/
au InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
au InsertLeave * match ExtraWhitespace /\s\+$/
au BufWinLeave * call clearmatches()

" ignore tab highlights for go files
let tabftexclude = ['go', 'c']
highlight PreceedingTabs ctermbg=darkgray
match PreceedingTabs /^\t\+/
au BufWinEnter * if index(tabftexclude, &ft) < 0 | match PreceedingTabs /^\t\+/
au InsertEnter * if index(tabftexclude, &ft) < 0 | match PreceedingTabs /^\t\+\%#\@<!/
au InsertLeave * if index(tabftexclude, &ft) < 0 | match PreceedingTabs /^\t\+/
au BufWinLeave * call clearmatches()
